[
  {
    "headline": "Clear's journey to conquer e-invoicing",
    "data": "How Clear built an enterprise-grade product with complex integrations and world-class performance for one of India’s biggest compliance changes in recent times For most Indians, 1st October 2020 was an ordinary day: the country in partial lockdown, people working from home, vaccination still a while away and the economy fighting to stay afloat. For a small team of passionate techies at Clear, the midnight of October 1 was indeed extraordinary. Because it’s the day we built and launched the software that would power one of India’s biggest compliance transformations.For the uninitiated, e-invoicing is the law that mandates every B2B invoice to be electronically authenticated by the GST Network (GSTN) in real-time. This means that businesses need to upload their invoices, have them validated and e-way bill generated — entirely electronically — before the goods can leave the warehouse!This is unprecedented in compliance law for two reasons. Compliance is almost always a consequence that happens post-facto, not a hindrance to conducting the business itself. For instance, if you make a wrong entry, you can still sell the product and adjust/pay a fine later. That’s not possible with e-invoicing. In fact, without proper authentication, you can’t even get the product to the market. E-invoicing makes compliance a prerequisite.Moreover, it necessitates complete digitisation. Businesses can no longer scribble on sheets of paper and fix the books later. They need to submit accurate information across hundreds of fields in advance. This is a paradigm shift in not just compliance, but also business operations itself.To be fair, e-invoicing has been a long-time coming. For years, there have been whispers in all corners. For years, there have also been false starts and postponements. Add to it the global pandemic, few expected the e-invoicing law to actually come into force.But this time, the government was determined. It announced the first phase, making it mandatory for taxpayers with a turnover of Rs. 500+ crore to follow e-invoicing. Soon, this would become the norm for every business. Overnight, every business would need to equip themselves with advanced technology — with complex integrations and real-time processing capability — to just keep the lights on. The tech un-savvy small and medium enterprises (SMEs), who did everything on paper ledgers would need to go digital. The somewhat tech-savvy business that ran everything on spreadsheets or non-standard custom software would need more horsepower. In fact, even enterprises that use expensive ERP systems need to update.To embrace e-invoicing successfully, businesses need only one thing: Robust purpose-built technology. We, at Clear, began building it.What it takes to build complex compliance tech Our journey, however, began long before 01 October 2020. It’s tempting to say that we started almost 10 years ago, when we began with the mission to “make it easy for Indians to file their taxes, every year.” But our e-invoicing journey started a little later.In 2019, when the news around e-invoicing was in the air, Clear set up a small team of product owners, chartered accountants and developers. We did extensive research — met the officials at the NIC in Bangalore to understand the landscape. We spoke to enterprises, who were already customers using our GST solution, to gain a sense of the market. We experimented with the APIs that the government opened up. We put together a pilot and took it to the market for validation. We demo-ed it to CFOs and business leaders. We collected feedback. Our agile and dynamic development teams optimised the product, getting it ready for launch.At 12 am on the first of October 2020, with 700+ integrations across dozens of third-party ecosystems, various ERPs and government APIs, we took ClearTax e-invoicing live. In retrospect, building our e-invoicing product was an endeavour unlike any other. In the middle of a raging pandemic, our customers were not only getting used to our product but they were also getting acquainted with the e-invoicing law itself. In essence, we were building a boat to carry someone who is seeing the sea for the first time.So, we got all hands on deck to ensure an impeccably smooth transition for our customers.In parallel, our engineering teams began working on improving the product and strengthening it for scale. We reimagined the user experience to make sure that every customer can perform every task they need — from registration to filing — right from within the ClearTax e-invoicing app. We upgraded the tech stack too for lightning-fast performance.We achieved all this with no disruption to the customer at all. ClearTax e-invoicing 2.0 was completely backward compatible. No one was re-onboard. While we pulled the boat from under their feet and replaced it with a new one, no one faced any trouble.8 milliseconds response time5000+ IRNs per minute1 lakh e-invoices/e-way bills at a time200,000 document downloads in one go99.2% P0 functionality success rate55.3 customer NPS scoreThe e-invoicing product is an important milestone in Clear’s journey. While we began as a customer tax filing company, our GST solution established us as a strong B2B fintech player. The e-invoicing product goes one step further to strengthen our position. Over 3,500 customers, including Fortune 500 companies, trust us today. We are processing about 10 per cent of India’s B2B invoices, with over $300 billion trade value.What’s in store ahead for Clear Not just that, while building e-invoicing, we also transformed ourselves into a fundamentally more agile, product-driven technology company. We performed architecture reviews more carefully. We evaluated performance-cost trade-offs more comprehensively. We set up processes for how systems need to be built. We brought together enough resources to build anything that’s used by more than one team, accelerating reusability. We recreated the platform team.We also set for ourselves high standards for engineering KPIs and aligned them clearly to business goals. This improved our quality standards. Today, even if there is a P4 bug, the product doesn’t go into production. This empowered our QA and CA teams to contribute proactively to the product. For the first time in the history of Clear, we completely sunset the first version of our e-invoicing product, migrating every single customer to the new and improved version.As a software product and as a technology company, e-invoicing takes us one step further in our mission of building India’s largest B2B business network to solve for use cases across procurement, invoicing, payments, collections and more. E-invoicing will also power our global ambitions, catapulting us to the next level in our journey."
  },
  {
    "headline": "The Era of Alternative Lending",
    "data": "– A brief introduction to Revenue Based Financing (RBF)Introduction It is no secret that Indian MSMEs face a massive credit gap. Some studies estimate this deficit to be to the tune of ₹ 45 Lakh Crores, or $ 600 Billion. The magnitude of this credit gap is so large, that almost 9 out of 10 MSMEs in the country have to resort to informal sources of credit, due to the severely limited access to formal credit facilities.When it comes to the problem of lack of access to formal credit, the primary culprit is the lack of collaterals, improper financials and an absent credit history. Due to this, MSMEs have to resort to alternative solutions for financing, such as personal loans and borrowings, personal savings and the informal sector. When these enterprises resort to financing from the informal sector, they end up paying almost twice as much in interests as they would have otherwise. This makes financing from the informal sector a very exorbitant affair.Enter Revenue Based Financing As the Indian economy looks for new sources to finance its 63 Million MSMEs, one innovative new class of capital that has proved to be very promising in its current form is Revenue Based Financing (RBF).But what exactly is Revenue Based Financing? Revenue Based Financing, or simply RBF, is a recently introduced and increasingly popular model that allows enterprises to raise funds by pledging a certain share of their future revenues to the financiers.For a majority of Indian MSMEs, their financial health is a factor that may determine their very existence, with the ecosystem going through multiple macroeconomic disruptions at regular intervals of time, especially in the last 5-6 years. Many a times, these enterprises are left with no avenues for the inflow of working capital. And this is especially true since the last few years, with increasingly stringent financial regulations coming into play, making access to bank lending a lot more difficult for these MSMEs, as banks grow a lot more hesitant in servicing the aforementioned, due to no tangible collaterals, improper financial records and incomplete overall documentation.This is perhaps why entrepreneurs are seriously considering Revenue Based Financing, which provides a respite from this problem. Leveraging their estimated future earnings, MSMEs, or the borrowers in this case, essentially pledge ‘revenue share’- a certain proportion of their revenue, to the financier, after which they pay back the principal amount along with the revenue share. This makes it non-dilutive funding, allowing the enterprise to retain ownership of its organisation, its assets and other collaterals it would have needed to leverage in order to raise funds from the banks.And for early-to-mid stage startups, this makes a lot of financial sense, as financial growth become crucial for survival in the intensely competitive Indian MSME ecosystem, as entrepreneurs seek to avoid problems like the debt trap. Another factor that works in RBF’s favour is the flexibility it offers these enterprises, allowing them to grow at a pace they are comfortable with.Why RBF? Over the years, there have been monumental infrastructural changes within India’s economy, which has pushed the adoption of revenue based financing in the country.Some of these include:It is reported that an estimated 30% of the cash in the Indian banking system is corporate surplus, which yields low returns for them.Revenue Based Financing vs. Traditional Financing: A Sneak Peek Here’s how Revenue Based Financing is different from Traditional Financing.AssessmentSecurityLoan ValueRepaymentsTraditional FinancingAsset available as securityAsset MortgageFactor of the value of mortgagePre-defined payment scheduleRevenue Based FinancingSales of the company & sustainabilityFuture cash flows as securityFactor of the revenueLinked to payouts from the customerThe Way Forward Perhaps another reason why Revenue Based Financing is so important is because of the promising role it can potentially play in the future of Indian Supply Chain Finance, as RBF, still in its infancy, is yet to grow to its full potential.It is reported that an estimated 30% of the cash stashed in the Indian Banking System is actually corporate surplus. Add to this statistic the fact that the systematic reduction in interest rates is forcing corporates to look for alternative avenues for investing in order to maximise their treasury incomes, especially on investments made in risk-averse assets. And when we talk about Credit Line Utilisation, only about half these companies have utilisation exceeding 50%, with only 20.2% companies reporting utilisation of 80% and above, and a measly 28.3% reporting utilisation in the range of 50-80%.Invoice Discounting: the oldest form of Revenue Based Financing? One such avenue is Invoice Discounting, which is perhaps the oldest Revenue Based Financing Instrument, and has the potential to revolutionise the Indian SCF ecosystem. This is because enterprises have access to funds which can enable credit to vendors via invoice discounting.The shift to revenue based financing can thus solve both these problems: the problem of lack of working capital avenues for vendors and the problem of low-yielding corporate surplus.In Summary Currently, Revenue Based Financing is still relatively limited in terms of the coverage of the ecosystem, and the number of organisations offering such solutions (which currently is just limited to FinTechs such as Clear, offering technology-enabled platforms enabling Invoice Discounting). However, as we progress towards a more digitised, transparent economy, RBF is all set to grow to its full potential."
  },
  {
    "headline": "Integrating Payments with React Native on App (Black)",
    "data": "How we built a custom checkout experience on top of our payment partner SDK, completely in React Native.At Clear we build our apps using react-native (a cross-platform app development framework) and on the same line, we have built our mutual fund app, Black. The app primarily has two modules ITR and Mutual Funds purchase. On the mutual fund's side, although we support 40+ AMC’s, our Payment experience was not great, so we decided to improve the checkout and payment experience for our users.We already had checkout and payment flow on our app, but we were completely relying on our external payment partner. The problem with this approach was that we were not in control of UI/UX for eg: default payment options, previously saved information, color scheme, error handling etc.The High level requirements are mentioned below,UI/UXWith the design team coming up with the UX, it was time for engineering to kick off the work. Before directly diving into the Code, States, and Hooks, let’s have a look at the design prototypes,The screen primarily lists various payment modes, and on selecting a particular mode the actions and details of that mode are shown by expanding the component, sort of a drop-down experience. There is also a popup to select a bank account against each payment method and Finally, an error screen needs to be configured based on various error codes.Code design and ArchitectureLet’s go through the various methods and approaches used, to achieve the design and simultaneously meet the initial guidelines that were laid out, in the following sections.ComponentizationAs we all know componentization is one of the basic principles of react, which makes it one of the preferred frameworks for front-end design. So the first task here would be to divide the whole page into small components that can act independently.So at first sight we would roughly componentize the page as,But the problem with the approach this that, in each payment method component there would be certain parts of code getting repeated,We can think of putting the header UI as a separate component and including it in each method’s component,But still, the logic of expanding/shrink will be duplicated in each component which will be not a good scalable solution. React native allows us to pass components as children, hence we can use this approach to arrive at a scalable solution. So the entire payment component can be decoupled into parent and child components.The parent component will take care of expanding, shrinking, bank account selection and each child component will take care only of the particular payment method’s UI, validation methods, etc. Hence the final code looks as follows,By this approach we have decoupled the logic and UI, hence in the future adding a new method would be very much simple — add a new component for payment and wrap it up with this parent component.Few more De-CouplingWe are relying on our payment partners currently for fetching the UPI apps installed on the user’s device. Hence in the UPI app section, the UPI app list has also been decoupled and designed as a separate component, which fetches and displays the list of UPI apps. By this approach, in future, if any changes occur in the payment partner’s SDK, the change would be required only in this component and the core payment component would be unaffected. This UPI apps component also encapsulates the logic of preferential sorting where few apps are shown on preference.Lifting the ‘state’ up and use of Context APIReact recommends lifting the state up to a common ancestor so that various components can share the common data. Here also on the payments page, we have lots of states and data that manage various UI components. For eg. selected payment method, selected bank account, UPI suggestions, downtime data, last successful payment data, etc.Passing these values to individual components would become unmanageable and will increase the code lines on the parent page. To overcome this we would be using the context API provided by react-native that allows to share common data across components.By this approach, each component will de-structure and take the required information internally and there would be no dependency on the parent page to pass the required props for components individually.The function of the payments page will only be to initiate the transaction on the payment partner’s side, based on the selected payment method, and handle success and error cases.Error handlingAs laid out initially we wanted to have a configurable error handling experience, without app release or code-push. To achieve this we have hosted a configuration file in our internal system to configure the error experience against each error code from SDK. Let’s see the structure of JSON to have a better understanding,As we can see against each code, there are fields that describe the error message to be shown along with button labels and actions. For eg: for bank_account_invalid code the user would see a page with the message “Your bank accounts are invalid…” message and 2 buttons which take the user to add bank and profile pages respectively.But fetching this file in-app and finding the error codes and info would be an inefficient way of doing things. Here we have leveraged our GraphQL server infra to do this piece of work. Every time there is an error from SDK, the app queries out the GraphQL server for the action, the server in turn responds only with the piece of JSON against the error scenario.Error reportingBy the above approach, we were also able to handle error reporting to our internal channels. Once the app reports an error to the GraphQL server, the server pushes some severe error scenarios along with user and session info, to our internal channels for manual intervention. This error reporting, without GraphQL server, would have been a difficult task. The errors are also logged and kept for future reference or debugging.BenefitsThis coding approach has helped us a lot in testing the release of the payment as we could test the individual components thoroughly and release it bug-free. The approach also made sure that, there were no severe hiccups faced while scaling up our new payments page to our entire user base.Later when we added a new custom payment option of “Pay Later” not even a single existing code was touched to accommodate the new method.Taking it to next level 🚀We are constantly in touch with our other payment partners, to arrive at a solution where this page can be scaled to support payments through other partners as well.Adding a configuration against each payment method and each bank for enabling and disabling the method, as it has come to our notice some of the banks do not support the compliance (verification of user identity) against certain methods."
  },
  {
    "headline": "Bridging Profitability and Working Capital Needs with Dynamic Discounting",
    "data": "IntroductionThe Buyer-Supplier Relationship is perhaps one of the most peculiar relationships in the Supply Chain. Empowered by economic inter-dependence, this relationship is further strengthened by their common objective: to build successful, sustaining Supply Chains. For Suppliers, the rationale to develop a dependable supply chain is to ensure their short-term working capital requirements are always met, while for the Buyer it helps ensure steady and timely delivery of goods.In India, however, this coveted relationship tends to get strained due to a number of factors, most of which revolve around Payment Practices, changes in Working Capital requirements, Pandemics, Supply Chain inefficiencies, and more. Often, this leads to a marked increase in the Credit Risk Environment, which can result in a full-blown economic slowdown.In today’s increasingly erratic and unpredictable economy, this leads to adverse results for the entire Supply Chain. Indian MSMEs, which account for the bulk of the Indian Suppliers, are adversely affected when their Working Capital Requirements are not met by the Supply Chain and/or the existing Financial System, especially during times of economic uncertainty. This can become a serious problem in developing countries like India, where lack of ready access to capital can spell serious trouble for millions of MSMEs.The ContextAs per a recent study by Atradius, Credit Risk and Business Performances have deteriorated in the country, with pertinent focus on the significant deterioration in the B2B-Payments Behaviour. While this has been attributed to the subsequent ‘waves’ of the COVID-19 Pandemic in the country by experts, the report goes on to state that there has been an approximate 3X increase in the number of write-offs of debt that is deemed ‘uncollectable’, and 2X increase in the average valuation of overdue bills/invoices.This is a clear indication of the reduced risk appetite and an apparent increase in insolvencies, translating to a further increase in delayed payments within the Supply Chain and beyond. This particular statistic is of great significance for India, as we already face an average delay of Sixty-Five days to get payments after the date of their invoicing. As you might imagine, this would further deteriorate the financial plans of the MSMEs, leading to even more insolvencies.The SolutionWith problems of such magnitude rampant, one would expect the availability of a plethora of solutions (financial products in this case) designed specially to cater to the financial crunch.This, however, is not entirely true. Till very recently, there existed only a few financial products. These included Working Capital Loans, CC Limits, Overdraft Facilities apart from loans and advances, and relied primarily on the creditworthiness of the aforementioned suppliers, requiring elaborate paperwork and involving excruciating amounts of time to process, rendering these virtually unhelpful.This is what led to the introduction of simpler, more intuitive and accessible financial products that offered much better Supplier Financing Solutions. One of these solutions is Dynamic Discounting, which we believe, is perhaps the most effective.Dynamic Discounting: A Brief IntroductionSimply put, Dynamic Discounting refers to the process of offering discounts to the Buyers for early payment on approved bills/invoices for the products and/or services delivered by the Supplier. It has often been defined as a self-adjusting (hence ‘dynamic’ discounting) between the aforementioned parties where the discount offered by the supplier is dependent on how early the amount is paid, extending flexibility to the buyer to choose the when and how much for the payment. The earlier the payment is to be made, the higher would be the discount.Keeping in mind the success of Dynamic Discounting Solutions in the market, this form of supplier financing has seen a steady increase in adoption across industries, especially those that are increasingly leveraging technology to improve efficiencies and reduce costs. More and more companies, led by their Accounts Payable, Procurement and Treasury Departments, as it serves a strategic investment opportunity for the company.Dynamic Discounting initiatives, however, require comprehensive, technology-enabled software platforms that offer e-invoicing services, supplier portals, seamless data transfers, robust data security, and an intuitive overall experience.FinTechs such as Clear enable the process of dynamic discounting by integrating with buyers’ Enterprise Resource Planning Softwares (ERPs) to enable seamless data transfers, allowing smooth transactions.Dynamic Discounting and the Great Indian Supply Chain.Dynamic Discounting creates values for all members in the Supply Chain: For Buyers, who are more often than not the initiators, Dynamic Discounting essentially automates the complete discounting process for the organisation while achieving higher returns than they otherwise would have with their Treasury Funds.For the Suppliers, Dynamic Discounting is that miraculously affordable financing option that gets them easy access to cash, helping them optimise their Working Capital, and aiding in their liquidity. It ends up being a revolutionary program that prevents many an organisation from going out of business, especially in the Indian context, where Suppliers, primarily MSMEs, are at a greater risk of getting delayed payments and thus face a greater magnitude of financial stress.What does the future look like?As Indian businesses are predicted to face a greater number of financial difficulties, Dynamic Discounting is one technique of Supplier Financing that shows the most potential. As the awareness about Invoice Discounting grows amongst the consumers, there seems to be a growing demand for platforms that offer these services, enabling all parties in the situation to thrive and survive in a definitively strained environment.What improves these platforms’ adoption, awareness, and usage amongst the consumers is how streamlined their interface is, whether or not they have the capability to integrate with consumers’ ERPs, how secure they keep the data they are given access to, how they manage the relationship between the two parties to further strengthen the Supply Chain, and most importantly the consistency in delivering profitability, efficiency and compliance."
  },
  {
    "headline": "[React Native] Workaround/The hard way to run animations at 60FPS",
    "data": "This post is about how I got the animation work smooth on React Native for a given use case. I’ll first walk you through the possible ways to animate on React Native, then the challenges I faced and why I chose a particular approach.Use Case: I need to show a number roller animation on the Home screen on every App Launch.I didn’t know how to do this animation on ReactNative, when I googled, I came across this library and here is how I tried the sample app.Approach 1When I ran the above code, below is the animation I saw.The animation is working as desired in the sample app. It’s time to evaluate if the animation works the same in a real-world production app.Here is what happened when I mocked the above challenges in the sample app by adding the below code.So, keeping the JS thread busy made animation Jerky. This is not the experience I want to give to the users.Is there a way to improve the above code?I started exploring library code to see if there is a scope for improving the performance.After reading the library’s code I knew it is not possible to improve animation performance for the following reason.Approach 2After doing a bit more research I came across this blog which talks about using Native Driver.Using Native Driver won’t improve the performance of animation in my UseCase for the below reasonsApproach 3React Native Re-Animated has Re-Designed and worked on new architecture whose primary goal is to get rid of the native bridge and directly communicate with Native Thread. With the help of Worklets, it executes part of JS code on a separate JS Virtual Machine which can run synchronously with Native UI thread without frame drops.So, approaches #1, #2, #3 discussed above are not the options for me to try.Approach 4I want to trigger animation with required props from JS thread and pass it on to Native thread and let Native thread, maintain the context and do the math behind the animation for every frame.By going through this blog I understood how to create Native modules and export them to React Native. Now, let’s create and export one.packages.add(new NumberRollerPackage());Exporting Native component to ReactNativeUsing Native component in React NativeLet’s see JS and Native thread animation at the same time in action by keeping JS thread busy.It doesn’t matter how busy JS thread is, our NumberRolling animation is going to be performant at any circumstance/device configuration.Note: You can implement the same on IOS too."
  },
  {
    "headline": "sqlcli, or: Creating a side-project in rust without knowing the language",
    "data": "We just open-sourced a small command-line tool called sqlcli. This blog post is the story of how this tool came into existence.By Ankit SolankiMotivationClearTax’s data platform has a lot of small parts. One of the tools we have built is a DIY ETL layer that lets you quickly do transformations with a bunch of SQL queries. Basically, this ETL layer allows you to:This worked for a while, but as the number of such jobs that were scheduled started going up, we started to see issues:We started to look for tools that could help with these issues. We were looking for something that can give us intelligence on user-entered SQL queries, so we could lint / validate them before execution.One of our end goals was to also automate the scheduling — so that the jobs would run in order of dependencies without manual scheduling / prioritisation. (We’re still not 100% there yet, but this tool is a step in that direction.)SearchI tried to find and evaluate existing solutions first.Uber’s queryparser seemed like it would exactly fit our needs, but we ran into some problems with it. Since this was a side-project, I didn’t really keep great notes so I don’t remember the exact issues. Suffice to say that we had ruled this out.After ruling out queryparser, we looked for any libraries that generically read SQL statements and respond with an AST. I tried a couple of python / nodejs libraries, but ended up looking at sqlparser-rs — a rust library.It was extremely easy to run the examples provided in the project’s readme. So in a super-unscientific manner, I chose to proceed with this library even though I have no rust experience — sideprojects are a place to have fun after all :)ImplementationI don’t know rust, and all I’ve read about the language led me to believe that it’s a very verbose and low level language. I was wrong.I still wouldn’t say that I know the language in-depth, but rust just has excellent developer tooling and ergonomics. Using cargo, I was quickly able to set up a new project and get started.I opened the new project in VS Code, installed the extensions that were recommended to me, and within minutes I had an editor with full syntax checking, type hints and compiler integration.Rust’s documentation is stellar. And it’s surprisingly easy to build small scripts very quickly — the compiler gets out of the way in most scenarios.And rust has pattern matching, my favourite language feature. Pattern matching + recursive descent makes AST Traversal very easy.And for quick scripts, you don’t really need to understand the borrow checker or understand memory management, liberal usage of .clone and .unwrap will get you far! My aim was to just get the compiler to stop complaining.In fact, without knowing the language at all, I had a working prototype for the tables command of sqlcli within 90 minutes!And since rust makes it dead easy to do testing, I was actually pretty sure that the prototype was actually working!After this initial proof of concept, the project lay idle for a few months since we hadn’t yet picked up the changes on the infra platform side. I recently decided to open-source it, it actually took me longer to pretty it up than write the initial implementation.I am sure that any rust programmer who looks at the source of sqlcli would probably have a lot of feedback — I’m not sure it’s idiomatic or if it follows all the best practices. But I’m reasonably certain that it works reliably and it has been able to handle the complex test cases I’ve thrown at it. Not bad for a weekend hack :)ConclusionWorking with rust was surprisingly pleasant. I don’t think it will be a major part of our tech stack at ClearTax right now, but I am looking forward to personally hacking with this language. It’s now on my personal list of languages to learn / master. My next side project may probably be in rust again.Any language community that makes onboarding so simple deserves to succeed."
  },
  {
    "headline": "A brief introduction to BLACK app’s JSON-driven UI in react native",
    "data": "How we created dynamic screens and components so that anyone in the team can change the layout of the screen.At Clear we build almost all front-end products using some variant of react and on the same line, we have built our mutual fund app, Black, using react-native. If you use codepush with react native releasing any change is instantaneous but it again depends on the engineers of the team. So, we wanted to make a few screens that have more power on our conversion rate so dynamic that anyone in the team can add or remove components to it without the help of an engineer.I will start with a small example of how a JSON structure of one small part of a screen looks like. The below screenshot is a part of the Black app’s home screen.In this part of the screen, we show a list of top-performing mutual funds to buy in each category like equity, Flexi cap, and large-cap in a horizontal scroll view and each block has a “View all” CTA which takes the user to a list of all funds under a particular category.And this is how JSON of the above part of the screen looks like,Rowsrows is an array of components that we will render vertically and each row can contain a title, cta and cardsCardscards is an array of card and each card contains an id and it is mapped to a react component.const components = { \"1\": VerticalListBlock, \"2\": CardTitleThumbnail }CTABoth card and row can contain a cta object which will contain screen name which we can pass to react-navigation and args will contain navigation params.Below is the simple implementation to create a screen using the above JSON. Showing only the necessary parts for simplicity.Handling themes in the JSON-driven systemWe maintain a dark and light theme using react context.In our JSON instead of passing a color hex code we pass a name of the color like primary, error, text1, text2, etc. The value of the actual color will change based on the current theme of the app.Handling navigationEvery CTA will have a target screen’s name and required params in argskey and we use react-navigation for app navigation.Before calling navigate we check if the screen exists as there is a chance a new screen is added in the new version of the app but the user is on the old version (Though we use codepush there are always a situation where we add a new screen which in turn has a native dependency).Handling versioningThere are situations where we wanted some JSON blocks to be rendered only on specific versions of the app. We handle it by adding app_version key to each component in the JSON and render it conditionally based on the current app version.app_version:{ max_version:23, min_version:19 }Managing the JSONWe internally use self-hosted retool to host and manage the JSON but as of now, that’s not the best way so we have to move towards a better way to manage to edit the JSON so that nobody mistakenly adds or misspells a key.Taking it to the next levelOne drawback to the above approach is the layout of the cards, the colors and fonts have to be predefined and it is sufficient in most cases as you can always release an app update during a major design system change. To extend this you can always maintain a view type and position prop inside the JSON itself and render a dynamic component by reading all the props like converting JSON to react components."
  },
  {
    "headline": "Simplifying lives of accountants with our new reconciliation engine",
    "data": "Before we deep-dive into our new reconciliation engine (Mentat) and how it helped improve overall process efficiency, let us understand about reconciliation in brief.What is Reconciliation?In accounting, reconciliation is the process of ensuring that two sets of records, usually the balances of two account, are in agreement. Reconciliation is used to ensure that the money leaving an account matches the actual money spent. This is done by making sure that the balances match at the end of a particular accounting period.At ClearTax, we used to have a reconciliation engine for GST return filing. It was supporting only one type of reconciliation — GSTR-2A vs Purchase Register.Challenges in our old reconciliation engineTo tackle the problems listed above, we needed a new reconciliation engine which can be customisable and would be capable to improve performance. Hence, we built Mentat — our new reconciliation engine.How does Mentat help us?Example, { \"description\": \"Rule Description\", \"task\": { \"task1\": { \"field_names\": [ \"field_name_to_be_transformed\" ], \"function\": \"transformation_function\" }, \"task2\": { \"field_names\": [ \"field_name_to_be_transformed\" ], \"function\": \"transformation_function2\" } } }Note: We have reduced time taken to roll-out new Recon use-case from 3~4 months to 1 Week now with Mentat.Achieving 10x improvements with MentatBelow is the comparison between old reconciliation vs Mentat. We could clearly see around 10x improvements over old service.Introduction to k8 PodsHow do k8 pods make a difference?Think about it like creating server on-demand. What if we launch new pods and simply call a server for each request? We can make our reconciliation faster and taking actions, filtering/sorting data would call an independent isolated server, which would definitely be faster. K8 pods are nothing but a list of containers where each container would be running different sets of reconciliation independently.Cost impacts of using k8 podsSince these containers are on demand we can significantly save on infra cost. While we compare our old recon vs Mentat we could get upto 60% of cost saving.We will talk about the Mentat architecture, server-side matching vs client-side matching, web-workers and more details about k8 pods in the next part of this blog."
  },
  {
    "headline": "Why Fintech's data integration with your ERP matters",
    "data": "Introduction Touted as the ‘Central Nervous System of a Business’, ERP (Enterprise Resource Planning), over the years, has evolved to become perhaps the most crucial software suite in shaping and securing the future of any enterprise. Today, organisations across industries leverage ERP Suites to manage day-to-day operations across divisions: from Procurement, Accounting, Risk Management, and Compliance to even Supply Chain Operations.Designed around one common database, ERPs are based upon a single, defined data structure, which ensures that the information being communicated across divisions within the organisation has the same context and user experiences. These ERP systems share data across functions, from Purchase, Sales, Accounting, Human Resources, Marketing, Operations, etc., utilising the most cutting edge technologies like Artificial Intelligence (AI), Machine Learning (ML), Internet of Things (IoT), and advanced analytics to provide businesses accurate insights, intelligent automation, and greater efficiencies to become essentially a life support system for the organisation; a device to integrate processes, people and technologies throughout the enterprise.What’s trending?Businesses across industries have very specific requirements when it comes to the ERP suites they implement. Over the years, we’ve seen ERPs grow to accommodate almost any requirements a business might put forth. Whether it is Disruptive Changes in the Supply Chain realm, Unprecedented Digitisation, Macro-Economic Calamities like the COVID-19 Pandemic, ERPs have got you covered.From an On-Premise Solution customised to suit the needs and requirements of clients, ERPs have moved quickly to the Cloud, on the back of the explosion of the Software-as-a-Service (SaaS) Model, offering unmatched scalability and convenience to users, as ERPs must be able to reflect specific workflows that ensure business processes work, which is why, over the years, ERPs have evolved to become mini-ecosystems in their own right, with simple-yet-powerful APIs that leverage the latest technologies, helping businesses improve efficiencies.Data IntegrationData is the language that an ERP suite speaks. As we already know, ERPs are designed around one database common to all functions within a business, so as to ensure the consistency, validity, and quality of data flowing within the organisation. Using this approach, organisations leverage ERPs to simplify and standardise all communications flowing from one department to the other, creating an end-to-end system where all functions ‘talk’ in the same language.Fintechs & ERPsFinTechs in India and beyond have grown at an astronomical pace in the past few years. Explosive growth on the back of greater digitisation, the prevalence of technology, better services, and a more aware, tech-savvy consumer base ensured that FinTechs are a force to reckon with. However, FinTechs, despite their stellar history on the B2C side, see the B2B segment as the hotbed for growth in the near future.Earlier, FinTechs strived to make the lives of their customers simpler, more convenient, and thus better. Be it Mobile wallets or the introduction of Unified Payments Interface (UPI), FinTechs designed their products towards the end consumers.However, in a marked change in strategy, FinTechs have been increasingly targeting Businesses across industries in order to cater to the burgeoning B2B Space, providing innovative new solutions to solve their daily challenges, aiming for a market disruption all over again on the back of financial innovation.With a generational change in the corporate leadership, today’s corporate leaders only want the very best in terms of the User Interface, Innovation, and CX- similar to what they experience as consumers. FinTechs understand this and work towards providing an experience to their corporate clients similar to what their consumers experience.To this end, ERP integration is perhaps of utmost importance, as they allow these FinTechs to provide the aforementioned experience. ERPs are a reflection of the workflows that ensure all processes work as they are supposed to, and as businesses increasingly adopt newer, more advanced technologies, the role of ERPs comes under greater scrutiny as automation is perhaps the most crucial factor to remain competitive in today’s market.Additionally, a modern ERP solution offers flexible deployment options, improved security and privacy, sustainability, and low-code customisation. But most importantly, it would lead to building resilience and continuity into your business, through insights that help you innovate at a rapid rate today while preparing your business for the future.Integrating with ERPs“Value innovation is the cornerstone of tapping the uncontested market as companies will make the competition irrelevant by creating a leap in value for buyers and their company, thereby opening up new and uncontested market space instead of focusing on beating the competition!“ – W Chan Kim, Professor of Strategy at INSEAD.The products offered by FinTechs leverage powerful APIs to integrate with companies’ ERPs in order to1. Automate Manual Processes, or 2. Improve Efficiency, Profitability, or Compliance. This has led both parties to design greater compatibilities amongst the products to maximise the aforementioned.Clear + Your ERP: A Perfect MatchClear offers a one-of-its-kind Invoice Discounting Platform that leverages the latest technologies to provide perhaps the most advanced Supplier Financing Solutions in the country and beyond. How? In one word: Flexibility.We provide suppliers the flexibility to manage working capital as per their organisational requirements, where buyers with un-utilised cash or credit lines, can deploy the capital for early payments to suppliers leading to improved gross margins (increase in EBITDA) at no risk.We leverage powerful Rest APIs to seamlessly integrate with clients’ ERP, which includes ERPs from vendors such as SAP (including S/4 Hana and ECC) Oracle, Microsoft Dynamics and even their homegrown ERPs. This allows us to provide a seamless experience to all the parties involved, especially the Client and its Supplier ecosystem.Furthermore, Clear Invoice Discounting prides itself on being compatible with scenarios including Direct Rest API Connectivity, using middleware (like PI, CPI, through SFTP servers), and Manual Uploads as well.This integration allows us to introduce our clients to the principles of Dynamic Discounting, providing both buyers and their suppliers unprecedented flexibility in Supply Chain Financing and Working Capital Management.In a nutshellAt the end of the day, all a business needs are happy, satisfied, and content consumers. And that is exactly what FinTechs are aiming for. With unprecedented efforts being invested in making the Customer Experience stand out, it is imperative for these organisations to integrate with their clients’ ERPs. This doesn’t just allow their products to speak the language of the enterprise in question, but be able to maximise efficiency, and by extension, profitability and compliance.And at Clear, we are unequivocally committed to providing a win-win solution for Buyers, their Suppliers and Financiers.To conclude, let me quote Former US President, John F. Kennedy, who is 1959 stated how ‘crisis’ can be a danger as well as an opportunity. In the spirit of this article, I’d say, Danger and opportunities abound in fintech after crisis events."
  }
]